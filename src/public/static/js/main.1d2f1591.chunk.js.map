{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","sensor","react_default","a","createElement","className","react_router_dom","App_Navigation","react_router","exact","path","component","Home","App_Table","Component","Navigation","style","textDecoration","color","to","Table","App_Data","Data","_this2","getDataFromDb","fetch","then","data","json","res","setState","intervalIsSet","interval","setInterval","clearInterval","display","length","colSpan","map","dat","updatedAt","temperature","humidity","dewpoint","pressure","light","speed","direction","rainfall","battery","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d2f1591.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport {BrowserRouter, Route, Link} from 'react-router-dom';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      sensor:[]\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"main\">\n      <BrowserRouter>\n      <div>\n        <Navigation/>\n        <Route exact path=\"/\" component={Home}/>\n        <Route exact path=\"/all\" component={() => <Table sensor=\"all\" />}/>\n        <Route exact path=\"/temperature\" component={() => <Table sensor=\"temperature\" />}/>\n        <Route exact path=\"/humidity\" component={() => <Table sensor=\"humidity\" />}/>\n        <Route exact path=\"/dewpoint\" component={() => <Table sensor=\"dewpoint\" />}/>\n        <Route exact path=\"/pressure\" component={() => <Table sensor=\"pressure\" />}/>\n        <Route exact path=\"/light\" component={() => <Table sensor=\"light\" />}/>\n        <Route exact path=\"/speed\" component={() => <Table sensor=\"speed\" />}/>\n        <Route exact path=\"/direction\" component={() => <Table sensor=\"direction\" />}/>\n        <Route exact path=\"/rainfall\" component={() => <Table sensor=\"rainfall\" />}/>\n      </div>       \n      </BrowserRouter>      \n    </div>\n    );\n  }\n}\n\nconst Navigation=(props)=>{\n  return(\n    <nav>\n      <ul className=\"navigation\">\n        <li><Link style={{ textDecoration: 'none', color: \"darkgrey\"}} to={`/`}>Home</Link></li>\n        <li><Link style={{ textDecoration: 'none', color: \"darkgrey\" }} to={`/all`}>All sensors</Link></li>\n        <li><Link style={{ textDecoration: 'none', color: \"darkgrey\" }} to={`/temperature`}>Temperature</Link></li>\n        <li><Link style={{ textDecoration: 'none', color: \"darkgrey\" }} to={`/humidity`}>Humidity</Link></li>\n        <li><Link style={{ textDecoration: 'none', color: \"darkgrey\" }} to={`/dewpoint`}>Dewpoint</Link></li>\n        <li><Link style={{ textDecoration: 'none', color: \"darkgrey\" }} to={`/pressure`}>Pressure</Link></li>\n        <li><Link style={{ textDecoration: 'none', color: \"darkgrey\" }} to={`/light`}>Light level</Link></li>\n        <li><Link style={{ textDecoration: 'none', color: \"darkgrey\" }} to={`/speed`}>Wind speed</Link></li>\n        <li><Link style={{ textDecoration: 'none', color: \"darkgrey\" }} to={`/direction`}>Wind direction</Link></li>\n        <li><Link style={{ textDecoration: 'none', color: \"darkgrey\" }} to={`/rainfall`}>Rainfall</Link></li>\n      </ul>\n    </nav>\n  );\n}\n\nconst Home=(props)=>{\n  return(\n    <div className=\"containerhome\">\n    <div className=\"welcome\">\n      Welcome\n    </div> \n    </div>\n  );\n}\n\nclass Table extends Component{\n  render() {\n    return (\n      <div>\n        <Data sensor ={this.props.sensor}/>    \n      </div>    \n    );\n  };\n};\n\nclass Data extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      data: [],\n      intervalIsSet: false\n    };  \n  }\n\n\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 500);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  getDataFromDb = () => {\n    fetch('https://living-lab-app.herokuapp.com/api/retrieveData')\n      .then((data) => data.json())\n      .then((res) => this.setState({ data: res.data }));\n  };\n\n  render() {\n    const { data } = this.state;\n    const display=this.props.sensor;\n    if(this.props.sensor===\"all\"){\n      return(\n        <div className=\"dataTable\">\n          <h1>Displaying {display} data</h1>\n          <table>\n            <thead>\n            <tr>\n              <th>Date</th>\n              <th>Temperature (°C)</th>\n              <th>Humidity (%)</th>\n              <th>Dewpoint (°C)</th>\n              <th>Pressure (mmHg)</th>\n              <th>Light level (%)</th>\n              <th>Wind speed (m/s)</th>\n              <th>Wind direction (deg)</th>\n              <th>Rainfall (mm)</th>\n              <th>Battery (V)</th>\n            </tr>\n            </thead>\n            <tbody>\n            {data.length <= 0\n              ?   <tr><td colSpan=\"10\">no data available</td></tr>\n              : data.map((dat) => (             \n                    <tr>\n                    <td>{dat.updatedAt}</td> \n                    <td>{dat.temperature}</td> \n                    <td>{dat.humidity} </td> \n                    <td>{dat.dewpoint} </td> \n                    <td>{dat.pressure} </td> \n                    <td>{dat.light} </td> \n                    <td>{dat.speed} </td> \n                    <td>{dat.direction} </td> \n                    <td>{dat.rainfall} </td> \n                    <td>{dat.battery} </td> \n                    </tr>               \n                ))}\n            </tbody>   \n          </table>\n        </div>\n      );\n    }else{\n      return (\n        <div className=\"dataTable\">\n          <h1>Displaying {display} data</h1>\n          <table className=\"smallTable\">\n           <thead>\n           <tr>\n              <th>Date</th>\n              <th>{this.props.sensor}</th>\n            </tr>\n          </thead>\n          <tbody>\n          {data.length <= 0 ? \n          <tr><td colSpan=\"2\">no data available</td></tr>\n          : data.map((dat) => (              \n              <tr>\n                <td>{dat.updatedAt}</td> \n                <td>{dat[display]}</td> \n              </tr>               \n            ))}\n           </tbody>   \n          </table>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}